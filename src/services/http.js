/**
 * ============================================================
 *  http.js ‚Äî Cliente HTTP gen√©rico para proyectos React (Vite)
 * ============================================================
 * Si queremos trabajar con axios
 *
 * üîπ Funci√≥n: centralizar todas las llamadas al backend
 * üîπ Evita repetir fetch, headers, JSON, manejo de errores, etc.
 * üîπ Se usa desde servicios espec√≠ficos (contactoService.js, clienteService.js...)
 *
 * ============================================================
 */

// üåç URL base del backend (definida en .env o valor por defecto)
const BASE_URL = import.meta.env.VITE_API_URL ?? "http://localhost:8080";

// ‚è±Ô∏è Tiempo m√°ximo de espera (ms) para cada petici√≥n
const DEFAULT_TIMEOUT_MS = 10_000;

/**
 * Funci√≥n interna para realizar peticiones HTTP
 * @param {string} path - ruta del endpoint (ej: "/contactos/todos")
 * @param {object} options - m√©todo, headers, body, etc.
 * @param {number} timeoutMs - milisegundos antes de cancelar la petici√≥n
 */
async function request(path, options = {}, timeoutMs = DEFAULT_TIMEOUT_MS) {
  const controller = new AbortController();
  const id = setTimeout(() => controller.abort(), timeoutMs);

  try {
    const response = await fetch(`${BASE_URL}${path}`, {
      signal: controller.signal,
      headers: {
        ...(options.body ? { "Content-Type": "application/json" } : {}),
        ...options.headers,
      },
      ...options,
    });

    // üß© Si la respuesta no es 2xx ‚Üí lanza error con detalle
    if (!response.ok) {
      const text = await response.text().catch(() => "");
      const message = text || response.statusText || "Error HTTP desconocido";
      throw new Error(`HTTP ${response.status} - ${message}`);
    }

    // üß† Si hay cuerpo JSON ‚Üí devu√©lvelo, si no ‚Üí null (casos 204, DELETE)
    const contentType = response.headers.get("content-type") || "";
    if (contentType.includes("application/json")) {
      return await response.json();
    }
    return null;
  } catch (error) {
    if (error.name === "AbortError") {
      throw new Error("La petici√≥n tard√≥ demasiado (timeout).");
    }
    throw error;
  } finally {
    clearTimeout(id);
  }
}

// ============================================================
// üì° Funciones p√∫blicas ‚Äî se exportan para usar en otros m√≥dulos
// ============================================================

/** Petici√≥n GET */
export function httpGet(path, opts) {
  return request(path, { method: "GET", ...(opts || {}) });
}

/** Petici√≥n POST (env√≠a un cuerpo JSON) */
export function httpPost(path, body, opts) {
  return request(path, {
    method: "POST",
    body: JSON.stringify(body),
    ...(opts || {}),
  });
}

/** Petici√≥n PUT (reemplaza un recurso completo) */
export function httpPut(path, body, opts) {
  return request(path, {
    method: "PUT",
    body: JSON.stringify(body),
    ...(opts || {}),
  });
}

/** Petici√≥n PATCH (actualiza parcialmente un recurso) */
export function httpPatch(path, body, opts) {
  return request(path, {
    method: "PATCH",
    body: JSON.stringify(body),
    ...(opts || {}),
  });
}

/** Petici√≥n DELETE */
export function httpDelete(path, opts) {
  return request(path, { method: "DELETE", ...(opts || {}) });
}
